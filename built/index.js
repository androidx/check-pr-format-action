import * as core from '@actions/core';
import * as github from '@actions/github';
function checkPullRequestFormat() {
    const workFlowPaylod = github.context.payload;
    const pullRequest = github.context.payload.pull_request;
    // Log Full Context
    core.info(`Workflow Context ${JSON.stringify(github.context)}`);
    // Log the actual workflow payload for debugging
    core.info(`Workflow payload ${JSON.stringify(workFlowPaylod)}`);
    if (!!pullRequest == false) {
        // Checks can only be performed when it is a pull request.
        return;
    }
    const body = pullRequest?.body;
    if (!!body === false) {
        core.info(`No pull request body. `);
        core.setFailed(`No pull request body.`);
        return;
    }
    let checks = core.getInput('checks');
    if (!!checks === false) {
        core.setOutput('status', false);
        core.setFailed('No checks.');
    }
    else {
        // Checks are a JSON array.
        let parsedChecks = JSON.parse(checks);
        core.info(`Parsed checks: [${parsedChecks}]`);
        const result = _checkPullRequestFormat(parsedChecks, body);
        if (result) {
            core.info(`PR Format checks passed.`);
            core.setOutput('status', true);
        }
        else {
            core.info(`PR Format checks failed.`);
            core.setOutput('status', false);
            core.setFailed(`The pull request ${body} does not match one of the following checks ${checks}`);
        }
    }
}
function _checkPullRequestFormat(expressions, body) {
    const lines = body.split(RegExp('\r?\n'));
    const compiled = [];
    let matches = 0;
    // Indexes
    let i = 0;
    let j = 0;
    // Compile Expressions
    for (i = 0; i < expressions.length; i += 1) {
        compiled[i] = new RegExp(expressions[i]);
    }
    // Validate
    for (i = 0; i < lines.length; i += 1) {
        let matched = false;
        for (j = 0; j < compiled.length && matched === false; j += 1) {
            matched = compiled[j].test(lines[i]);
        }
        if (matched) {
            matches += 1;
        }
    }
    return compiled.length <= matches;
}
(function () {
    try {
        checkPullRequestFormat();
    }
    catch (error) {
        core.setFailed(`Unable to validate pull request body ${error}`);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLElBQUksTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxLQUFLLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQUUxQyxTQUFTLHNCQUFzQjtJQUM3QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFFeEQsbUJBQW1CO0lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUUvRCxnREFBZ0Q7SUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFaEUsSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLEtBQUssRUFBRTtRQUMxQiwwREFBMEQ7UUFDMUQsT0FBTztLQUNSO0lBRUQsTUFBTSxJQUFJLEdBQUcsV0FBVyxFQUFFLElBQUksQ0FBQztJQUMvQixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDeEMsT0FBTztLQUNSO0lBRUQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDOUI7U0FBTTtRQUNMLDJCQUEyQjtRQUMzQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBYSxDQUFDO1FBQ2xELElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDOUMsTUFBTSxNQUFNLEdBQUcsdUJBQXVCLENBQUMsWUFBWSxFQUFFLElBQU0sQ0FBQyxDQUFDO1FBQzdELElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2hDO2FBQU07WUFDTCxJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsSUFBSSwrQ0FBK0MsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUNqRztLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsV0FBcUIsRUFBRSxJQUFZO0lBQ2xFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUMsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixVQUFVO0lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1Ysc0JBQXNCO0lBQ3RCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxQztJQUNELFdBQVc7SUFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1RCxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QztRQUNELElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUMsQ0FBQztTQUNkO0tBQ0Y7SUFDRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDO0FBQ3BDLENBQUM7QUFHRCxDQUFDO0lBQ0MsSUFBSTtRQUNGLHNCQUFzQixFQUFFLENBQUM7S0FDMUI7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsd0NBQXdDLEtBQUssRUFBRSxDQUFDLENBQUM7S0FDakU7QUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29yZSBmcm9tICdAYWN0aW9ucy9jb3JlJztcbmltcG9ydCAqIGFzIGdpdGh1YiBmcm9tICdAYWN0aW9ucy9naXRodWInO1xuXG5mdW5jdGlvbiBjaGVja1B1bGxSZXF1ZXN0Rm9ybWF0KCk6IHZvaWQge1xuICBjb25zdCB3b3JrRmxvd1BheWxvZCA9IGdpdGh1Yi5jb250ZXh0LnBheWxvYWQ7XG4gIGNvbnN0IHB1bGxSZXF1ZXN0ID0gZ2l0aHViLmNvbnRleHQucGF5bG9hZC5wdWxsX3JlcXVlc3Q7XG4gICAgXG4gIC8vIExvZyBGdWxsIENvbnRleHRcbiAgY29yZS5pbmZvKGBXb3JrZmxvdyBDb250ZXh0ICR7SlNPTi5zdHJpbmdpZnkoZ2l0aHViLmNvbnRleHQpfWApXG5cbiAgLy8gTG9nIHRoZSBhY3R1YWwgd29ya2Zsb3cgcGF5bG9hZCBmb3IgZGVidWdnaW5nXG4gIGNvcmUuaW5mbyhgV29ya2Zsb3cgcGF5bG9hZCAke0pTT04uc3RyaW5naWZ5KHdvcmtGbG93UGF5bG9kKX1gKTtcblxuICBpZiAoISFwdWxsUmVxdWVzdCA9PSBmYWxzZSkge1xuICAgIC8vIENoZWNrcyBjYW4gb25seSBiZSBwZXJmb3JtZWQgd2hlbiBpdCBpcyBhIHB1bGwgcmVxdWVzdC5cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBib2R5ID0gcHVsbFJlcXVlc3Q/LmJvZHk7XG4gIGlmICghIWJvZHkgPT09IGZhbHNlKSB7XG4gICAgY29yZS5pbmZvKGBObyBwdWxsIHJlcXVlc3QgYm9keS4gYCk7XG4gICAgY29yZS5zZXRGYWlsZWQoYE5vIHB1bGwgcmVxdWVzdCBib2R5LmApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBjaGVja3MgPSBjb3JlLmdldElucHV0KCdjaGVja3MnKTtcbiAgaWYgKCEhY2hlY2tzID09PSBmYWxzZSkge1xuICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCBmYWxzZSk7XG4gICAgY29yZS5zZXRGYWlsZWQoJ05vIGNoZWNrcy4nKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaGVja3MgYXJlIGEgSlNPTiBhcnJheS5cbiAgICBsZXQgcGFyc2VkQ2hlY2tzID0gSlNPTi5wYXJzZShjaGVja3MpIGFzIHN0cmluZ1tdO1xuICAgIGNvcmUuaW5mbyhgUGFyc2VkIGNoZWNrczogWyR7cGFyc2VkQ2hlY2tzfV1gKTtcbiAgICBjb25zdCByZXN1bHQgPSBfY2hlY2tQdWxsUmVxdWVzdEZvcm1hdChwYXJzZWRDaGVja3MsIGJvZHkhISk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgY29yZS5pbmZvKGBQUiBGb3JtYXQgY2hlY2tzIHBhc3NlZC5gKTtcbiAgICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29yZS5pbmZvKGBQUiBGb3JtYXQgY2hlY2tzIGZhaWxlZC5gKTtcbiAgICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCBmYWxzZSk7XG4gICAgICBjb3JlLnNldEZhaWxlZChgVGhlIHB1bGwgcmVxdWVzdCAke2JvZHl9IGRvZXMgbm90IG1hdGNoIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNoZWNrcyAke2NoZWNrc31gKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NoZWNrUHVsbFJlcXVlc3RGb3JtYXQoZXhwcmVzc2lvbnM6IHN0cmluZ1tdLCBib2R5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgbGluZXMgPSBib2R5LnNwbGl0KFJlZ0V4cCgnXFxyP1xcbicpKTtcbiAgY29uc3QgY29tcGlsZWQgPSBbXTtcbiAgbGV0IG1hdGNoZXMgPSAwO1xuICAvLyBJbmRleGVzXG4gIGxldCBpID0gMDtcbiAgbGV0IGogPSAwO1xuICAvLyBDb21waWxlIEV4cHJlc3Npb25zXG4gIGZvciAoaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbXBpbGVkW2ldID0gbmV3IFJlZ0V4cChleHByZXNzaW9uc1tpXSk7XG4gIH1cbiAgLy8gVmFsaWRhdGVcbiAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IG1hdGNoZWQgPSBmYWxzZTtcbiAgICBmb3IgKGogPSAwOyBqIDwgY29tcGlsZWQubGVuZ3RoICYmIG1hdGNoZWQgPT09IGZhbHNlOyBqICs9IDEpIHtcbiAgICAgIG1hdGNoZWQgPSBjb21waWxlZFtqXS50ZXN0KGxpbmVzW2ldKTtcbiAgICB9XG4gICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgIG1hdGNoZXMgKz0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbXBpbGVkLmxlbmd0aCA8PSBtYXRjaGVzO1xufVxuXG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgY2hlY2tQdWxsUmVxdWVzdEZvcm1hdCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvcmUuc2V0RmFpbGVkKGBVbmFibGUgdG8gdmFsaWRhdGUgcHVsbCByZXF1ZXN0IGJvZHkgJHtlcnJvcn1gKTtcbiAgfVxufSkoKTtcbiJdfQ==