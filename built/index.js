import * as core from '@actions/core';
import * as github from '@actions/github';
function checkPullRequestFormat() {
    const workFlowPaylod = github.context.payload;
    const pullRequest = github.context.payload.pull_request;
    // Log the actual workflow payload for debugging
    core.info(`Workflow payload ${JSON.stringify(workFlowPaylod)}`);
    if (!!pullRequest == false) {
        // Checks can only be performed when it is a pull request.
        return;
    }
    const body = pullRequest?.body;
    if (!!body === false) {
        core.info(`No pull request body. `);
        core.setFailed(`No pull request body.`);
        return;
    }
    let checks = core.getInput('checks');
    if (!!checks === false) {
        core.setOutput('status', false);
        core.setFailed('No checks.');
    }
    else {
        // Checks are a JSON array.
        let parsedChecks = JSON.parse(checks);
        core.info(`Parsed checks: [${parsedChecks}]`);
        const result = _checkPullRequestFormat(parsedChecks, body);
        if (result) {
            core.info(`PR Format checks passed.`);
            core.setOutput('status', true);
        }
        else {
            core.info(`PR Format checks failed.`);
            core.setOutput('status', false);
            core.setFailed(`The pull request ${body} does not match one of the following checks ${checks}`);
        }
    }
}
function _checkPullRequestFormat(expressions, body) {
    const lines = body.split(RegExp('\r?\n'));
    const compiled = [];
    let matches = 0;
    // Indexes
    let i = 0;
    let j = 0;
    // Compile Expressions
    for (i = 0; i < expressions.length; i += 1) {
        compiled[i] = new RegExp(expressions[i]);
    }
    // Validate
    for (i = 0; i < lines.length; i += 1) {
        let matched = false;
        for (j = 0; j < compiled.length && matched === false; j += 1) {
            matched = compiled[j].test(lines[i]);
        }
        if (matched) {
            matches += 1;
        }
    }
    return compiled.length <= matches;
}
(function () {
    try {
        checkPullRequestFormat();
    }
    catch (error) {
        core.setFailed(`Unable to validate pull request body ${error}`);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLElBQUksTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxLQUFLLE1BQU0sTUFBTSxpQkFBaUIsQ0FBQztBQUUxQyxTQUFTLHNCQUFzQjtJQUM3QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM5QyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFFeEQsZ0RBQWdEO0lBQ2hELElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWhFLElBQUksQ0FBQyxDQUFDLFdBQVcsSUFBSSxLQUFLLEVBQUU7UUFDMUIsMERBQTBEO1FBQzFELE9BQU87S0FDUjtJQUVELE1BQU0sSUFBSSxHQUFHLFdBQVcsRUFBRSxJQUFJLENBQUM7SUFDL0IsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3hDLE9BQU87S0FDUjtJQUVELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzlCO1NBQU07UUFDTCwyQkFBMkI7UUFDM0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQWEsQ0FBQztRQUNsRCxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixZQUFZLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sTUFBTSxHQUFHLHVCQUF1QixDQUFDLFlBQVksRUFBRSxJQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLElBQUksK0NBQStDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDakc7S0FDRjtBQUNILENBQUM7QUFFRCxTQUFTLHVCQUF1QixDQUFDLFdBQXFCLEVBQUUsSUFBWTtJQUNsRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsVUFBVTtJQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLHNCQUFzQjtJQUN0QixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFDRCxXQUFXO0lBQ1gsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEMsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEM7UUFDRCxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxRQUFRLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztBQUNwQyxDQUFDO0FBR0QsQ0FBQztJQUNDLElBQUk7UUFDRixzQkFBc0IsRUFBRSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLHdDQUF3QyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ2pFO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvcmUgZnJvbSAnQGFjdGlvbnMvY29yZSc7XG5pbXBvcnQgKiBhcyBnaXRodWIgZnJvbSAnQGFjdGlvbnMvZ2l0aHViJztcblxuZnVuY3Rpb24gY2hlY2tQdWxsUmVxdWVzdEZvcm1hdCgpOiB2b2lkIHtcbiAgY29uc3Qgd29ya0Zsb3dQYXlsb2QgPSBnaXRodWIuY29udGV4dC5wYXlsb2FkO1xuICBjb25zdCBwdWxsUmVxdWVzdCA9IGdpdGh1Yi5jb250ZXh0LnBheWxvYWQucHVsbF9yZXF1ZXN0O1xuXG4gIC8vIExvZyB0aGUgYWN0dWFsIHdvcmtmbG93IHBheWxvYWQgZm9yIGRlYnVnZ2luZ1xuICBjb3JlLmluZm8oYFdvcmtmbG93IHBheWxvYWQgJHtKU09OLnN0cmluZ2lmeSh3b3JrRmxvd1BheWxvZCl9YCk7XG5cbiAgaWYgKCEhcHVsbFJlcXVlc3QgPT0gZmFsc2UpIHtcbiAgICAvLyBDaGVja3MgY2FuIG9ubHkgYmUgcGVyZm9ybWVkIHdoZW4gaXQgaXMgYSBwdWxsIHJlcXVlc3QuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgYm9keSA9IHB1bGxSZXF1ZXN0Py5ib2R5O1xuICBpZiAoISFib2R5ID09PSBmYWxzZSkge1xuICAgIGNvcmUuaW5mbyhgTm8gcHVsbCByZXF1ZXN0IGJvZHkuIGApO1xuICAgIGNvcmUuc2V0RmFpbGVkKGBObyBwdWxsIHJlcXVlc3QgYm9keS5gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgY2hlY2tzID0gY29yZS5nZXRJbnB1dCgnY2hlY2tzJyk7XG4gIGlmICghIWNoZWNrcyA9PT0gZmFsc2UpIHtcbiAgICBjb3JlLnNldE91dHB1dCgnc3RhdHVzJywgZmFsc2UpO1xuICAgIGNvcmUuc2V0RmFpbGVkKCdObyBjaGVja3MuJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hlY2tzIGFyZSBhIEpTT04gYXJyYXkuXG4gICAgbGV0IHBhcnNlZENoZWNrcyA9IEpTT04ucGFyc2UoY2hlY2tzKSBhcyBzdHJpbmdbXTtcbiAgICBjb3JlLmluZm8oYFBhcnNlZCBjaGVja3M6IFske3BhcnNlZENoZWNrc31dYCk7XG4gICAgY29uc3QgcmVzdWx0ID0gX2NoZWNrUHVsbFJlcXVlc3RGb3JtYXQocGFyc2VkQ2hlY2tzLCBib2R5ISEpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGNvcmUuaW5mbyhgUFIgRm9ybWF0IGNoZWNrcyBwYXNzZWQuYCk7XG4gICAgICBjb3JlLnNldE91dHB1dCgnc3RhdHVzJywgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcmUuaW5mbyhgUFIgRm9ybWF0IGNoZWNrcyBmYWlsZWQuYCk7XG4gICAgICBjb3JlLnNldE91dHB1dCgnc3RhdHVzJywgZmFsc2UpO1xuICAgICAgY29yZS5zZXRGYWlsZWQoYFRoZSBwdWxsIHJlcXVlc3QgJHtib2R5fSBkb2VzIG5vdCBtYXRjaCBvbmUgb2YgdGhlIGZvbGxvd2luZyBjaGVja3MgJHtjaGVja3N9YCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9jaGVja1B1bGxSZXF1ZXN0Rm9ybWF0KGV4cHJlc3Npb25zOiBzdHJpbmdbXSwgYm9keTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIGNvbnN0IGxpbmVzID0gYm9keS5zcGxpdChSZWdFeHAoJ1xccj9cXG4nKSk7XG4gIGNvbnN0IGNvbXBpbGVkID0gW107XG4gIGxldCBtYXRjaGVzID0gMDtcbiAgLy8gSW5kZXhlc1xuICBsZXQgaSA9IDA7XG4gIGxldCBqID0gMDtcbiAgLy8gQ29tcGlsZSBFeHByZXNzaW9uc1xuICBmb3IgKGkgPSAwOyBpIDwgZXhwcmVzc2lvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb21waWxlZFtpXSA9IG5ldyBSZWdFeHAoZXhwcmVzc2lvbnNbaV0pO1xuICB9XG4gIC8vIFZhbGlkYXRlXG4gIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBtYXRjaGVkID0gZmFsc2U7XG4gICAgZm9yIChqID0gMDsgaiA8IGNvbXBpbGVkLmxlbmd0aCAmJiBtYXRjaGVkID09PSBmYWxzZTsgaiArPSAxKSB7XG4gICAgICBtYXRjaGVkID0gY29tcGlsZWRbal0udGVzdChsaW5lc1tpXSk7XG4gICAgfVxuICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICBtYXRjaGVzICs9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb21waWxlZC5sZW5ndGggPD0gbWF0Y2hlcztcbn1cblxuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGNoZWNrUHVsbFJlcXVlc3RGb3JtYXQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb3JlLnNldEZhaWxlZChgVW5hYmxlIHRvIHZhbGlkYXRlIHB1bGwgcmVxdWVzdCBib2R5ICR7ZXJyb3J9YCk7XG4gIH1cbn0pKCk7XG4iXX0=